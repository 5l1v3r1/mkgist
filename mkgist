#!/usr/bin/env python3
"""
Small utility for making anonymous gists from command line
"""

import os
import sys
import json
import argparse
import pyperclip
import requests

from requests.auth import HTTPBasicAuth
from os.path import isabs, expanduser



BASE_DIR = os.getcwd()
ENDPOINT = "https://api.github.com/gists"
SECRETS_FILE = os.path.expanduser("~/.mkgist.conf")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Utility for making anonymous gists")
    parser.add_argument("filenames", help="Name of file(s) to make into gist", nargs="*")
    parser.add_argument("-d", "--description", help="description for gist")
    parser.add_argument("-r", "--raw", action="store_true", help="fetch raw link")
    parser.add_argument("-n", "--nocopy", action="store_true",
                        help="print result url to screen instead of overwriting clipboard")
    parser.add_argument("-p", "--public", action="store_true",
                        help="make gist public")
    args = parser.parse_args()

    if args.public:
        request_data = { "public": True }
    else:
        request_data = { "public": False }

    if args.description:
        request_data["description"] = args.description

    SECRETS = json.load(open(SECRETS_FILE))

    if args.filenames:
        filenames = []
        for filename in args.filenames:
            if "/" not in filename:
                name = filename
            else:
                name = filename[filename.rfind("/") + 1:]
            filenames.append(name)

            if not "files" in request_data:
                request_data["files"] = { name: { "content": None } }
            else:
                request_data["files"][name] = { "content": None }

            try:
                if isabs(expanduser(filename)):
                    with open(expanduser(filename), "r") as content_file:
                        request_data["files"][name]["content"] = content_file.read()
                else:
                    with open("{}/{}".format(BASE_DIR, filename), "r") as content_file:
                        request_data["files"][name]["content"] = content_file.read()
            except IOError:
                print("An error occured when opening file {}".format(filename))
                exit(1)
    else:
        print("Reading from STDIN. If not piping, press Ctrl-D on a newline to finish.")

        request_data["files"] = {}
        request_data["files"]["out"] = { "content": None }
        request_data["files"]["out"]["content"] = sys.stdin.read()

    r = requests.post(ENDPOINT,
                     data=json.dumps(request_data),
                     auth=HTTPBasicAuth(SECRETS["username"], SECRETS["password"]))


    try:
        as_json = r.json()
        if "html_url" in as_json:
            if args.raw:
                if args.filenames:
                    if len(filenames) > 1:
                        for name in filenames:
                            print("{}:\n{}\n".format(name, as_json["files"][name]["raw_url"]))
                        exit(1)
                    else:
                        url = as_json["files"][args.filenames[0]]["raw_url"]
                else:
                    url = as_json["files"]["out"]["raw_url"]
            else:
                url = as_json["html_url"]

            if args.nocopy:
                print(url)
            else:
                pyperclip.copy(url)
                pyperclip.paste()
                print("Gist URL copied to clipboard.")
        else:
            print(as_json["message"].rstrip())
    except:
        print("An error occured")
